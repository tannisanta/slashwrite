---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import { getCollection } from 'astro:content';
import { getSiteConfig, getSocialConfig } from '@utils/config';
import { withBase }from 'utils/withBase.ts';

// Get all blog posts
const blogPosts = await getCollection('blog', ({ data }) => {
  return import.meta.env.PROD ? !data.draft : true;
});

// Extract and count categories
const categories = blogPosts.reduce((acc, post) => {
  if (post.data.categories) {
    post.data.categories.forEach(category => {
      acc[category] = (acc[category] || 0) + 1;
    });
  }
  return acc;
}, {} as Record<string, number>);

// Convert to array and sort alphabetically
const sortedCategories = Object.entries(categories)
  .sort(([a], [b]) => a.localeCompare(b))
  .map(([name, count]) => ({ name, count }));

// Get site configuration
const siteConfig = getSiteConfig();
const socialConfig = getSocialConfig();

// Get current path for active state detection
const currentPath = Astro.url.pathname;

// Helper function to determine if a link is active
function isActiveLink(linkPath: string): boolean {
  if (linkPath === '/') {
    return currentPath === '/';
  }
  return currentPath.startsWith(linkPath);
}

// Helper function to determine if a category is active
function isActiveCategory(categoryName: string): boolean {
  const categoryPath = `/categories/${categoryName.toLowerCase().replace(/\s+/g, '-')}`;
  return currentPath.startsWith(categoryPath);
}
---

<div class="fixed inset-x-0 top-0 z-50 lg:hidden bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-800">
  <div class="flex items-center justify-between h-16 px-4">
    <a href={withBase('/')} class="flex items-center gap-2 text-xl font-bold">
      <Icon name="book" class="w-6 h-6 text-indigo-600 dark:text-indigo-400" />
      <span>{siteConfig.brandTitle}</span>
    </a>
    
    <div class="flex items-center gap-2">
      <ThemeToggle />
      
      <button 
        id="mobile-menu-button" 
        class="p-2 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-800"
        aria-label="Toggle menu"
        data-menu-open="false"
      >
        <Icon name="menu" class="w-6 h-6 block" id="menu-open-icon" />
        <Icon name="x" class="w-6 h-6 hidden" id="menu-close-icon" />
      </button>
    </div>
  </div>
  
  <div id="mobile-menu-panel" class="hidden p-4 border-t border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900">
    <nav class="space-y-4">
      <a href={withBase('/')} class:list={[
        "block p-2 rounded-lg transition-colors",
        isActiveLink('/') 
          ? "bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 font-medium" 
          : "hover:bg-slate-100 dark:hover:bg-slate-800"
      ]}>Home</a>
      <a href={withBase('/about')} class:list={[
        "block p-2 rounded-lg transition-colors",
        isActiveLink('/about') 
          ? "bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 font-medium" 
          : "hover:bg-slate-100 dark:hover:bg-slate-800"
      ]}>About</a>
      <a href={withBase('/blog')} class:list={[
        "block p-2 rounded-lg transition-colors",
        isActiveLink('/blog') 
          ? "bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 font-medium" 
          : "hover:bg-slate-100 dark:hover:bg-slate-800"
      ]}>Blog</a>
      <a href={withBase('/projects')} class:list={[
        "block p-2 rounded-lg transition-colors",
        isActiveLink('/projects') 
          ? "bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 font-medium" 
          : "hover:bg-slate-100 dark:hover:bg-slate-800"
      ]}>Projects</a>
      <a href={withBase('/canvas')} class:list={[
        "block p-2 rounded-lg transition-colors",
        isActiveLink('/canvas') 
          ? "bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 font-medium" 
          : "hover:bg-slate-100 dark:hover:bg-slate-800"
      ]}>
        Canvas</a>
      
      {sortedCategories.length > 0 && (
      <div class="pt-4 border-t border-slate-200 dark:border-slate-800">
        <p class="text-xs uppercase tracking-wider text-slate-500 dark:text-slate-400 font-semibold mb-2">Categories</p>
        <div class="space-y-1">
            {sortedCategories.map(({ name, count }) => (
              <a 
              href={withBase(`/categories/${name.toLowerCase().replace(/\s+/g, '-')}`)}
                class:list={[
                  "flex justify-between items-center p-2 rounded-lg transition-colors",
                  isActiveCategory(name)
                    ? "bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 font-medium"
                    : "hover:bg-slate-100 dark:hover:bg-slate-800"
                ]}
              >
                <span>{name}</span>
                <span class:list={[
                  "text-xs rounded-full px-2 py-0.5",
                  isActiveCategory(name)
                    ? "bg-indigo-200 dark:bg-indigo-800 text-indigo-800 dark:text-indigo-200"
                    : "bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-300"
                ]}>{count}</span>
              </a>
            ))}
          </div>
        </div>
      )}
      
      <div class="pt-4 border-t border-slate-200 dark:border-slate-800">
        <p class="text-xs uppercase tracking-wider text-slate-500 dark:text-slate-400 font-semibold mb-2">Connect</p>
        <div class="flex space-x-3 items-center">
          <a href={socialConfig.github} class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800" aria-label="GitHub">
            <Icon name="github" class="w-5 h-5" />
          </a>
          <a href={socialConfig.linkedin} class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800" aria-label="LinkedIn">
            <Icon name="linkedin" class="w-5 h-5" />
          </a>
          <a href="/api/rss.xml" class="p-2 rounded-full hover:bg-slate-100 dark:hover:bg-slate-800" aria-label="RSS">
            <Icon name="rss" class="w-5 h-5" />
          </a>
        </div>
      </div>
    </nav>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu-panel');
    
    if (mobileMenuButton && mobileMenu) {
      // Click handler
      mobileMenuButton.addEventListener('click', () => {
        // Get menu state
        const isExpanded = mobileMenuButton.getAttribute('data-menu-open') === 'true';
        
        // Toggle menu state
        mobileMenuButton.setAttribute('data-menu-open', (!isExpanded).toString());
        
        if (isExpanded) {
          // Close menu
          mobileMenu.classList.add('hidden');
          mobileMenuButton.querySelector('#menu-open-icon').classList.remove('hidden');
          mobileMenuButton.querySelector('#menu-open-icon').classList.add('block');
          mobileMenuButton.querySelector('#menu-close-icon').classList.add('hidden');
          mobileMenuButton.querySelector('#menu-close-icon').classList.remove('block');
        } else {
          // Open menu
          mobileMenu.classList.remove('hidden');
          mobileMenuButton.querySelector('#menu-open-icon').classList.add('hidden');
          mobileMenuButton.querySelector('#menu-open-icon').classList.remove('block');
          mobileMenuButton.querySelector('#menu-close-icon').classList.remove('hidden');
          mobileMenuButton.querySelector('#menu-close-icon').classList.add('block');
        }
      });
      
      // Add click event handler
      document.addEventListener('click', (event) => {
        // ...existing code...
      });
    }
  });
</script>