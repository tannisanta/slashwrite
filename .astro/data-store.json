[["Map",1,2,9,10,44,45,58,59],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.3","content-config-digest","b392258d76b10b65","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://tannisanta.github.io/slashwrite\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{\"jpeg\":{\"quality\":80},\"png\":{\"quality\":80},\"webp\":{\"quality\":80},\"avif\":{\"quality\":65}}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,32,33],"how-i-became-a-technical-writer",{"id":11,"data":13,"body":27,"filePath":28,"digest":29,"legacyId":30,"deferredRender":31},{"title":14,"description":15,"pubDate":16,"updatedDate":17,"heroImage":18,"tags":19,"categories":22,"subject":23,"draft":24,"featured":24,"author":25,"location":26},"How I became a Technical Writer","Description",["Date","2024-05-01T00:00:00.000Z"],["Date","2024-05-01T00:00:00.000Z"],"https://images.pexels.com/photos/196644/pexels-photo-196644.jpeg",[20,21],"Astro","Blog",[23],"documentation",false,"Tetiana Tsakun","Warsaw，Poland","## 💡 项目概述\n\n欢迎使用我们的现代个人博客平台！该系统结合了前沿的Web技术，创建了一个高性能、功能丰富的内容管理系统，专为博主、开发者和内容创作者设计。\n\n### 主要特点\n\n**内容管理**\n- 基于MDX的博客文章，支持丰富的格式和代码高亮\n- 具有主类别和子主题的分层分类系统\n- 标签系统，支持相关内容发现\n- 精选文章和草稿模式\n\n**用户体验**\n- 响应式三栏布局，针对移动设备优化\n- 深色/浅色主题切换，带平滑过渡效果\n- 优化的文章列表，保持一致的对齐方式\n- 具有动态类别菜单的增强导航\n\n**性能**\n- 静态站点生成，实现闪电般的页面加载速度\n- 图片优化和懒加载\n- CSS/JS压缩和代码分割\n- 高PageSpeed和Core Web Vitals得分\n\n**开发者体验**\n- 基于组件的架构，易于维护\n- 使用Tailwind CSS进行快速样式设计\n- 内容集合，实现类型安全的内容管理\n- 清晰的约定和文档\n\n## 📚 内容管理\n\n### 创建博客文章\n\n博客文章以MDX文件格式存储在`src/content/blog/`目录中。每篇文章应遵循以下结构：\n\n```md\n---\ntitle: 文章标题\ndescription: 文章的简短描述\npubDate: 2024-01-01\nupdatedDate: 2024-01-02 # 可选\nheroImage: https://example.com/image.jpg # 可选\ntags: ['typescript', 'react', 'web development']\ncategories: ['programming']\nsubject: 'React' # 子类别\ndraft: false\nfeatured: false\nauthor: 你的名字\nlocation: 城市，国家\n---\n\n你的内容在这里...\n```\n\n### 前置元数据字段\n\n#### 必填字段\n- `title`: 文章标题\n- `description`: 简短摘要（建议150-160个字符）\n- `pubDate`: 发布日期（YYYY-MM-DD）\n- `tags`: 相关标签数组\n- `categories`: 类别数组\n\n#### 可选字段\n- `updatedDate`: 最后更新日期\n- `heroImage`: 特色图片URL\n- `subject`: 主类别内的子类别\n- `draft`: 设置为`true`可在生产构建中排除\n- `featured`: 设置为`true`可在首页突出显示\n- `author`: 文章作者名\n- `location`: 作者所在地\n\n### 推荐标签\n- 技术: `web development`, `tools`, `software`\n- 编程: `javascript`, `typescript`, `react`, `node.js`\n- 设计: `ui`, `ux`, `css`, `design systems`\n- 通用: `tutorial`, `guide`, `opinion`, `career`\n\n## 🏗 项目架构\n\n该项目遵循一个组织良好的结构：\n\n```\nsrc/\n├── components/     # 可复用UI组件\n├── content/        # 博客文章和内容集合\n│   ├── blog/      # 博客文章(MDX)\n│   └── projects/  # 项目展示\n├── layouts/        # 页面布局\n├── pages/         # 路由页面\n│   ├── blog/      # 博客文章页面\n│   ├── categories/ # 类别页面及子主题页面\n│   └── tags/      # 标签页面\n└── styles/        # 全局样式\n```\n\n### 关键组件\n- `ThreeColumnLayout.astro`: 主博客布局\n- `ArticleCard.astro`: 博客文章预览卡\n- `ArticleListItem.astro`: 紧凑型文章列表项，优化对齐\n- `TableOfContents.astro`: 自动生成的文章目录\n- `Navigation.astro`: 主导航菜单，针对移动设备优化\n- `Sidebar.astro`: 右侧边栏，显示最近文章/标签\n\n## 💻 开始使用\n\n### 安装\n\n```bash\n# 克隆仓库\ngit clone [repository-url]\n\n# 进入项目目录\ncd [project-directory]\n\n# 安装依赖\nnpm install\n\n# 启动开发服务器\nnpm run dev\n```\n\n### 开发工作流程\n\n1. 开发服务器将在`http://localhost:3000`可用\n2. 在`src/content/blog/`中编辑或添加博客文章\n3. 根据需要修改`src/components/`中的组件\n4. 在`src/styles/global.css`中更新样式\n\n### 生产环境构建\n\n```bash\n# 生产环境构建\nnpm run build\n\n# 预览生产构建\nnpm run preview\n```\n\n## 📝 编写内容\n\n### Markdown功能\n- 标题: `# H1`到`###### H6`\n- 列表: 有序和无序列表\n- 代码块: 支持语法高亮\n- 图片: 支持图片说明\n- 引用块\n- 表格\n\n### 代码示例\n```md\n```typescript\n// 你的代码在这里\n```\n```\n\n### 图片\n```md\n![替代文本](图片链接)\n```\n\n## 🔧 自定义设置\n\n### Astro配置\n编辑`astro.config.mjs`来自定义:\n- 站点元数据\n- Markdown/MDX选项\n- 集成设置\n- 构建配置\n\n### Tailwind配置\n编辑`tailwind.config.js`来自定义:\n- 主题设置\n- 颜色调色板\n- 排版\n- 自定义工具类\n\n## 🚀 部署\n\n该站点可以部署到各种平台:\n\n- Netlify\n- Vercel\n- GitHub Pages\n- AWS/Azure/GCP\n\n只需将你的仓库连接到你偏好的托管提供商，或在运行`npm run build`后上传`dist/`目录中的构建文件。\n\n## �� 许可证\n\nMIT © 2025","src/content/blog/how-i-became-a-technical-writer.mdx","43a8862ef0c6394f","how-i-became-a-technical-writer.mdx",true,"new-blog",{"id":32,"data":34,"body":40,"filePath":41,"digest":42,"legacyId":43,"deferredRender":31},{"title":35,"description":15,"pubDate":36,"heroImage":18,"tags":37,"categories":38,"draft":24,"featured":24,"author":25,"location":39},"New blog",["Date","2025-06-06T00:00:00.000Z"],[21],[],"","# 从零开始：Cloudflare Pages部署配置完全指南\n\n在现代Web开发中，选择一个合适的部署平台对项目的成功至关重要。今天我要分享一个完整的Cloudflare Pages部署指南，包括从GitHub集成到自定义域名配置的全流程。\n\n## 为什么选择Cloudflare Pages？\n\n在众多静态网站托管服务中，Cloudflare Pages具有以下显著优势：\n\n### 🚀 **性能优势**\n- **全球CDN网络**：Cloudflare在全球拥有200+个数据中心\n- **边缘计算**：内容在离用户最近的节点提供服务\n- **自动优化**：内置的图片优化、压缩和缓存策略\n- **HTTP/3支持**：最新的网络协议，提供更快的连接速度\n\n### 💰 **成本效益**\n- **免费额度generous**：每月100,000次请求免费\n- **带宽不限制**：无论流量多大都不额外收费\n- **SSL证书免费**：自动提供和更新SSL证书\n\n### 🛠️ **开发体验**\n- **Git集成**：直接连接GitHub、GitLab等代码仓库\n- **自动部署**：代码推送后自动触发构建和部署\n- **预览部署**：每个分支和PR都可以生成预览URL\n- **即时回滚**：一键回滚到任何历史版本\n\n## 部署前的准备工作\n\n### 1. 项目要求检查\n\n在开始部署之前，确保你的项目满足以下条件：\n\n```bash\n# 检查Node.js版本（建议18.0以上）\nnode --version\n\n# 确保项目可以正常构建\nnpm run build\n\n# 检查构建输出目录\nls -la dist/  # 或者你的输出目录\n```\n\n### 2. 项目结构优化\n\n对于最佳的部署体验，建议项目包含以下配置：\n\n**package.json 脚本配置：**\n```json\n{\n  \"scripts\": {\n    \"build\": \"你的构建命令\",\n    \"preview\": \"你的预览命令\"\n  }\n}\n```\n\n**性能优化配置文件：**\n\n创建 `public/_headers` 文件：\n```\n/*\n  X-Frame-Options: DENY\n  X-Content-Type-Options: nosniff\n  X-XSS-Protection: 1; mode=block\n  Referrer-Policy: strict-origin-when-cross-origin\n  Cache-Control: public, max-age=31536000, immutable\n\n/_astro/*\n  Cache-Control: public, max-age=31536000, immutable\n\n/api/*\n  Cache-Control: no-cache, no-store, must-revalidate\n```\n\n创建 `public/_redirects` 文件：\n```\n# SPA路由支持\n/blog/* /index.html 200\n/projects/* /index.html 200\n\n# 404处理\n/* /404.html 404\n```\n\n## Cloudflare Pages配置详细步骤\n\n### 第一步：登录和项目创建\n\n1. **访问Cloudflare控制台**\n   \n   打开 [Cloudflare Dashboard](https://dash.cloudflare.com/)，使用你的账户登录。\n\n2. **导航到Pages服务**\n   \n   在左侧导航栏中找到并点击 \"Pages\" 选项。\n\n3. **创建新项目**\n   \n   点击页面右上角的 \"创建项目\" 按钮。\n\n### 第二步：连接Git仓库\n\n1. **选择Git集成**\n   \n   在项目创建页面，选择 \"连接到Git\" 选项。\n\n2. **授权GitHub访问**\n   \n   如果是第一次使用，需要授权Cloudflare访问你的GitHub账户：\n   - 点击 \"GitHub\" 选项\n   - 在弹出的GitHub授权页面点击 \"Authorize Cloudflare\"\n   - 选择要授权的仓库（可以选择全部或指定仓库）\n\n3. **选择目标仓库**\n   \n   在仓库列表中找到并选择你的项目仓库，点击 \"开始设置\"。\n\n### 第三步：构建配置\n\n这是最关键的一步，正确的配置决定了部署是否成功：\n\n```yaml\n项目名称: my-awesome-website\n生产分支: main  # 或者 master\n构建命令: npm run build\n构建输出目录: dist  # 根据你的项目调整\n根目录: (留空，除非项目在子目录中)\n```\n\n**框架预设配置：**\n\n对于不同的框架，Cloudflare提供了预设配置：\n\n- **Astro**: 自动检测并配置构建命令\n- **Next.js**: 支持静态导出和服务端渲染\n- **Vue.js**: 支持Vue CLI和Vite项目\n- **React**: 支持Create React App和其他构建工具\n- **静态HTML**: 简单的静态文件项目\n\n### 第四步：环境变量设置\n\n根据项目需求设置环境变量：\n\n```bash\n# 必需的环境变量\nNODE_VERSION=18.20.8  # 指定Node.js版本\n\n# 可选的环境变量示例\nPUBLIC_SITE_URL=https://yourdomain.com\nPUBLIC_API_BASE_URL=https://api.yourdomain.com\n```\n\n**设置步骤：**\n1. 在项目设置页面找到 \"环境变量\" 部分\n2. 点击 \"添加变量\"\n3. 输入变量名和值\n4. 选择环境（生产、预览或两者）\n\n### 第五步：高级配置\n\n**构建配置优化：**\n\n```yaml\n# 构建超时设置\n构建超时: 20分钟  # 根据项目复杂度调整\n\n# 根目录设置\n根目录: \"\"  # 通常留空，除非项目在子目录\n\n# 兼容性标志\n兼容性日期: 2023-11-01  # 使用最新的兼容性设置\n```\n\n**部署配置：**\n\n- **生产部署**: 仅在主分支（main/master）有更新时触发\n- **预览部署**: 为所有分支和PR创建预览环境\n- **部署钩子**: 配置Webhook用于自定义集成\n\n## 自定义域名配置指南\n\n### 准备工作\n\n在配置自定义域名之前，确保：\n\n1. **域名所有权**: 你拥有要绑定的域名\n2. **DNS访问权限**: 可以修改域名的DNS记录\n3. **域名已解析**: 基本的DNS设置已生效\n\n### 配置步骤详解\n\n#### 第一步：添加自定义域名\n\n1. **进入域名设置**\n   \n   在你的Cloudflare Pages项目中，找到 \"自定义域名\" 选项卡。\n\n2. **添加域名**\n   \n   点击 \"设置自定义域名\"，输入你的域名（例如：`www.yourdomain.com`）。\n\n3. **选择域名类型**\n   \n   - **根域名**: `yourdomain.com`\n   - **子域名**: `www.yourdomain.com`、`blog.yourdomain.com`\n\n#### 第二步：DNS记录配置\n\n根据域名类型，需要添加不同的DNS记录：\n\n**对于子域名（推荐）：**\n```dns\n类型: CNAME\n名称: www\n目标: your-project.pages.dev\nTTL: 自动\n```\n\n**对于根域名：**\n```dns\n类型: CNAME\n名称: @\n目标: your-project.pages.dev\nTTL: 自动\n```\n\n#### 第三步：DNS设置详细步骤\n\n以下是在常见DNS服务商中的设置方法：\n\n**1. 如果使用Cloudflare作为DNS服务商：**\n\n```bash\n1. 登录Cloudflare Dashboard\n2. 选择你的域名\n3. 进入\"DNS\"选项卡\n4. 点击\"添加记录\"\n5. 填写以下信息：\n   - 类型: CNAME\n   - 名称: www（或你要的子域名）\n   - 目标: your-project.pages.dev\n   - 代理状态: 已代理（橙色云朵）\n```\n\n**2. 如果使用其他DNS服务商：**\n\n```bash\n1. 登录你的域名提供商控制面板\n2. 找到DNS管理或域名解析设置\n3. 添加新的CNAME记录：\n   - 主机记录: www\n   - 记录类型: CNAME\n   - 记录值: your-project.pages.dev\n   - TTL: 600（或默认值）\n```\n\n#### 第四步：SSL证书配置\n\nCloudflare会自动为你的自定义域名提供SSL证书：\n\n1. **证书申请**: 添加域名后自动开始\n2. **验证过程**: 通常需要几分钟到几小时\n3. **状态检查**: 在Cloudflare Pages控制台查看证书状态\n\n**SSL配置选项：**\n```bash\n# 在Cloudflare SSL/TLS设置中\n加密模式: 完全（严格）  # 推荐设置\n始终使用HTTPS: 开启\nHSTS: 开启（可选，增强安全性）\n最小TLS版本: 1.2\n```\n\n### 域名配置验证\n\n配置完成后，通过以下步骤验证：\n\n1. **DNS传播检查**\n   ```bash\n   # 使用dig命令检查DNS记录\n   dig www.yourdomain.com CNAME\n   \n   # 或者使用在线工具\n   # https://www.whatsmydns.net/\n   ```\n\n2. **SSL证书验证**\n   ```bash\n   # 检查SSL证书状态\n   curl -I https://www.yourdomain.com\n   \n   # 查看证书详情\n   openssl s_client -connect www.yourdomain.com:443\n   ```\n\n3. **网站功能测试**\n   - 访问主页面检查内容加载\n   - 测试不同路径的页面跳转\n   - 验证HTTPS重定向是否正常\n   - 检查移动端显示效果\n\n## 性能优化技巧\n\n### 1. 缓存策略优化\n\n通过 `_headers` 文件配置缓存：\n\n```\n# 静态资源长期缓存\n/_assets/*\n  Cache-Control: public, max-age=31536000, immutable\n\n# HTML文件短期缓存\n/*.html\n  Cache-Control: public, max-age=3600\n\n# API接口不缓存\n/api/*\n  Cache-Control: no-cache, no-store, must-revalidate\n```\n\n### 2. 压缩和优化\n\n```\n# 启用压缩\n/*\n  Content-Encoding: gzip\n\n# 安全头部设置\n/*\n  X-Frame-Options: DENY\n  X-Content-Type-Options: nosniff\n  X-XSS-Protection: 1; mode=block\n  Referrer-Policy: strict-origin-when-cross-origin\n```\n\n### 3. 重定向规则\n\n通过 `_redirects` 文件优化路由：\n\n```\n# 旧链接重定向\n/old-page  /new-page  301\n\n# SPA路由支持\n/app/*  /index.html  200\n\n# 移动端重定向\n/mobile/*  https://m.yourdomain.com/:splat  301\n```\n\n## 监控和维护\n\n### 部署监控\n\n1. **构建状态监控**\n   - 在Cloudflare Pages控制台查看构建日志\n   - 设置构建失败通知邮件\n   - 配置Webhook集成到Slack等工具\n\n2. **性能监控**\n   ```bash\n   # 使用Lighthouse检测性能\n   npm install -g lighthouse\n   lighthouse https://yourdomain.com --output html\n   \n   # 使用WebPageTest\n   # https://www.webpagetest.org/\n   ```\n\n### 常见问题排查\n\n**构建失败问题：**\n```bash\n# 检查Node.js版本\nError: Node.js version not supported\n解决方案: 设置正确的NODE_VERSION环境变量\n\n# 依赖安装失败\nError: npm install failed\n解决方案: 检查package-lock.json是否提交，清理node_modules重新安装\n\n# 构建超时\nError: Build exceeded time limit\n解决方案: 优化构建脚本，减少不必要的依赖\n```\n\n**域名访问问题：**\n```bash\n# DNS未生效\n问题: 域名无法访问\n解决方案: 等待DNS传播（通常24-48小时），检查DNS记录配置\n\n# SSL证书问题\n问题: HTTPS访问报错\n解决方案: 等待证书签发完成，检查证书状态\n```\n\n## 最佳实践总结\n\n### 1. 项目结构规范\n\n```\nproject/\n├── public/\n│   ├── _headers          # 性能和安全配置\n│   ├── _redirects        # 路由重定向规则\n│   └── assets/           # 静态资源\n├── src/                  # 源代码\n├── package.json          # 项目配置\n└── README.md            # 项目文档\n```\n\n### 2. 部署流程规范\n\n1. **开发分支**: `dev` 或 `develop`\n2. **预发布分支**: `staging`\n3. **生产分支**: `main` 或 `master`\n4. **功能分支**: `feature/xxx`\n\n### 3. 性能优化清单\n\n- [ ] 启用Gzip压缩\n- [ ] 配置合适的缓存策略\n- [ ] 优化图片资源（WebP格式）\n- [ ] 压缩JavaScript和CSS文件\n- [ ] 启用HTTP/2推送\n- [ ] 配置CDN加速\n\n### 4. 安全配置清单\n\n- [ ] 设置安全响应头\n- [ ] 启用HTTPS强制重定向\n- [ ] 配置内容安全策略（CSP）\n- [ ] 启用HSTS\n- [ ] 定期更新依赖包\n\n## 结语\n\nCloudflare Pages为我们提供了一个强大、可靠且经济的静态网站托管解决方案。通过本文的详细指南，你应该能够：\n\n1. **完成基础部署**: 从GitHub仓库到生产环境的完整流程\n2. **配置自定义域名**: 包括DNS设置和SSL证书配置\n3. **优化网站性能**: 通过缓存、压缩等技术提升用户体验\n4. **建立监控体系**: 确保网站稳定运行\n\n记住，部署只是开始，持续的优化和监控才能确保项目的长期成功。建议定期检查网站性能指标，根据用户反馈和数据分析不断改进。\n\n如果在配置过程中遇到问题，不要犹豫，Cloudflare的官方文档和社区都是很好的资源。祝你的项目部署顺利！\n\n---\n\n*本文基于实际项目配置经验编写，如有疑问欢迎在评论区交流讨论。*","src/content/blog/new-blog.mdx","bce5b727a093bfb3","new-blog.mdx","canvas",["Map",46,47],"quotes-fav",{"id":46,"data":48,"body":54,"filePath":55,"digest":56,"legacyId":57,"deferredRender":31},{"title":49,"description":50,"pubDate":51,"updatedDate":52,"heroImage":18,"tags":53,"draft":24},"Creative space","A modern, fast, and feature-rich blog platform built with Astro, React, and Tailwind CSS. Available on Astro's official theme directory.",["Date","2023-04-10T00:00:00.000Z"],["Date","2025-06-09T00:00:00.000Z"],[20,21],"# Modern Personal Blog\n\nThis is a modern, fast, and feature-rich blog platform built with Astro, React, and Tailwind CSS. **Now available on [Astro's official theme directory](https://portal.astro.build/themes/modern-personal-blog/)!**\n\nThis template combines the best of static site generation with dynamic features, creating a performant content management system perfect for personal blogs, portfolios, and project showcases.\n\n## Key Features\n\n### Content Management\n- **MDX Support**: Rich text formatting with React components in markdown\n- **Hierarchical Organization**: Categories and subjects for content structure\n- **Tagging System**: Related content discovery through tags\n- **Featured Posts**: Highlight important content\n- **Draft Mode**: Work on posts before publishing\n- **Multi-language Support**: Chinese and English content support\n\n### User Experience\n- **Responsive Design**: Three-column desktop layout with mobile optimization\n- **Dark/Light Theme**: Smooth theme transitions with user preference\n- **Table of Contents**: Auto-generated navigation for long posts\n- **Search & Filter**: Find content by tags, categories, and keywords\n- **Optimized Navigation**: Dynamic category menus and breadcrumbs\n\n### Performance & Technical\n- **Static Site Generation**: Lightning-fast page loads\n- **Image Optimization**: Automatic image optimization and lazy loading\n- **SEO Optimized**: Meta tags, Open Graph, JSON-LD, sitemap, and RSS\n- **Type Safety**: Full TypeScript support throughout the codebase\n- **Modern Build Tools**: Vite-powered development and build process\n\n## Technology Stack\n\n- **Astro 4.0**: Modern static site generator with Islands Architecture\n- **React 18**: Interactive components and client-side functionality\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n- **TypeScript**: Type-safe development experience\n- **MDX**: Enhanced Markdown with component support\n- **Vite**: Fast build tooling and development server\n\n## Getting Started\n\nThis template is now available through the official Astro theme directory! You can use it in multiple ways:\n\n### Option 1: Use Astro's Create Command (Recommended)\n```bash\n# Create a new project using this official theme\nnpm create astro@latest -- --template modern-personal-blog\n\n# Navigate to your project\ncd your-project-name\n\n# Install dependencies\nnpm install\n\n# Start developing\nnpm run dev\n```\n\n### Option 2: Clone from GitHub\n```bash\n# Clone the repository\ngit clone https://github.com/copyboy/product_whoami.git\n\n# Navigate to the project directory\ncd product_whoami\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Preview production build\nnpm run preview\n```\n\n### Option 3: Browse Official Theme Directory\nVisit the [Astro theme directory](https://portal.astro.build/themes/modern-personal-blog/) for detailed information, previews, and installation instructions.\n\n## Project Structure\n\n```\nsrc/\n├── components/     # Reusable UI components\n├── content/        # Blog posts and content collections\n│   ├── blog/      # Blog posts (MDX)\n│   └── projects/  # Project showcases\n│   └── canvas/    # Creative showcases\n├── layouts/        # Page layouts\n├── pages/         # Route pages\n│   ├── blog/      # Blog post pages\n│   ├── categories/ # Category pages with subject sub-pages\n│   └── tags/      # Tag pages\n├── styles/        # Global styles\n└── utils/         # Utility functions\n```\n\n## Content Management\n\n### Blog posts\nBlog posts are stored as MDX files in `src/content/blog/`. Each post supports:\n- Rich frontmatter with categories, tags, and metadata\n- MDX content with React components\n- Automatic slug generation and routing\n- Multi-language support (Chinese/English)\n\n### Project Showcases\nProject information is stored in `src/content/projects/` with support for:\n- Project descriptions and technical details\n- Repository and demo links\n- Technology stack information\n- Featured project highlighting\n\n## Customization\n\n### Site Configuration\nEdit `src/config/site.json` to customize:\n- Site metadata and branding\n- Author information and location\n- Social media links\n- Feature toggles\n\n### Styling\n- **Tailwind CSS**: Modify `tailwind.config.js` for theme customization\n- **Global Styles**: Edit `src/styles/global.css` for custom styles\n- **Components**: Customize UI components in `src/components/`\n\n### Content Organization\n- **Categories**: Organize posts by main categories\n- **Tags**: Add descriptive tags for content discovery\n- **Featured Content**: Mark important posts and projects","src/content/canvas/quotes-fav.mdx","6c922b4b645a8400","quotes-fav.mdx","projects",["Map",60,61],"modern-blog-template",{"id":60,"data":62,"body":69,"filePath":70,"digest":71,"legacyId":72,"deferredRender":31},{"title":63,"description":50,"pubDate":64,"updatedDate":65,"heroImage":18,"repoUrl":66,"demoUrl":67,"tags":68,"featured":31},"Personal blog",["Date","2023-04-10T00:00:00.000Z"],["Date","2025-06-09T00:00:00.000Z"],"https://github.com/copyboy/product_whoami","https://portal.astro.build/themes/modern-personal-blog/",[20,21],"# Modern Personal Blog\n\nThis is a modern, fast, and feature-rich blog platform built with Astro, React, and Tailwind CSS. **Now available on [Astro's official theme directory](https://portal.astro.build/themes/modern-personal-blog/)!**\n\nThis template combines the best of static site generation with dynamic features, creating a performant content management system perfect for personal blogs, portfolios, and project showcases.\n\n## Key Features\n\n### Content Management\n- **MDX Support**: Rich text formatting with React components in markdown\n- **Hierarchical Organization**: Categories and subjects for content structure\n- **Tagging System**: Related content discovery through tags\n- **Featured Posts**: Highlight important content\n- **Draft Mode**: Work on posts before publishing\n- **Multi-language Support**: Chinese and English content support\n\n### User Experience\n- **Responsive Design**: Three-column desktop layout with mobile optimization\n- **Dark/Light Theme**: Smooth theme transitions with user preference\n- **Table of Contents**: Auto-generated navigation for long posts\n- **Search & Filter**: Find content by tags, categories, and keywords\n- **Optimized Navigation**: Dynamic category menus and breadcrumbs\n\n### Performance & Technical\n- **Static Site Generation**: Lightning-fast page loads\n- **Image Optimization**: Automatic image optimization and lazy loading\n- **SEO Optimized**: Meta tags, Open Graph, JSON-LD, sitemap, and RSS\n- **Type Safety**: Full TypeScript support throughout the codebase\n- **Modern Build Tools**: Vite-powered development and build process\n\n## Technology Stack\n\n- **Astro 4.0**: Modern static site generator with Islands Architecture\n- **React 18**: Interactive components and client-side functionality\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n- **TypeScript**: Type-safe development experience\n- **MDX**: Enhanced Markdown with component support\n- **Vite**: Fast build tooling and development server\n\n## Getting Started\n\nThis template is now available through the official Astro theme directory! You can use it in multiple ways:\n\n### Option 1: Use Astro's Create Command (Recommended)\n```bash\n# Create a new project using this official theme\nnpm create astro@latest -- --template modern-personal-blog\n\n# Navigate to your project\ncd your-project-name\n\n# Install dependencies\nnpm install\n\n# Start developing\nnpm run dev\n```\n\n### Option 2: Clone from GitHub\n```bash\n# Clone the repository\ngit clone https://github.com/copyboy/product_whoami.git\n\n# Navigate to the project directory\ncd product_whoami\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Preview production build\nnpm run preview\n```\n\n### Option 3: Browse Official Theme Directory\nVisit the [Astro theme directory](https://portal.astro.build/themes/modern-personal-blog/) for detailed information, previews, and installation instructions.\n\n## Project Structure\n\n```\nsrc/\n├── components/     # Reusable UI components\n├── content/        # Blog posts and content collections\n│   ├── blog/      # Blog posts (MDX)\n│   └── projects/  # Project showcases\n├── layouts/        # Page layouts\n├── pages/         # Route pages\n│   ├── blog/      # Blog post pages\n│   ├── categories/ # Category pages with subject sub-pages\n│   └── tags/      # Tag pages\n├── styles/        # Global styles\n└── utils/         # Utility functions\n```\n\n## Content Management\n\n### Blog posts\nBlog posts are stored as MDX files in `src/content/blog/`. Each post supports:\n- Rich frontmatter with categories, tags, and metadata\n- MDX content with React components\n- Automatic slug generation and routing\n- Multi-language support (Chinese/English)\n\n### Project Showcases\nProject information is stored in `src/content/projects/` with support for:\n- Project descriptions and technical details\n- Repository and demo links\n- Technology stack information\n- Featured project highlighting\n\n## Customization\n\n### Site Configuration\nEdit `src/config/site.json` to customize:\n- Site metadata and branding\n- Author information and location\n- Social media links\n- Feature toggles\n\n### Styling\n- **Tailwind CSS**: Modify `tailwind.config.js` for theme customization\n- **Global Styles**: Edit `src/styles/global.css` for custom styles\n- **Components**: Customize UI components in `src/components/`\n\n### Content Organization\n- **Categories**: Organize posts by main categories\n- **Tags**: Add descriptive tags for content discovery\n- **Featured Content**: Mark important posts and projects","src/content/projects/modern-blog-template.mdx","b4a283ad7695c9e1","modern-blog-template.mdx"]